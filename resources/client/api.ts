/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Exams Reviews API
 * API for submitting and retrieving reviews for professors
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/MATTEONANNI1/GetReview/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ReviewUpdate
 */
export interface ReviewUpdate {
    /**
     * Updated rating for the professor's teaching
     * @type {number}
     * @memberof ReviewUpdate
     */
    valutazioneProfessore?: number;
    /**
     * Updated rating for the feasibility of the course
     * @type {number}
     * @memberof ReviewUpdate
     */
    valutazioneFattibilita?: number;
    /**
     * Updated rating for the course material
     * @type {number}
     * @memberof ReviewUpdate
     */
    valutazioneMateriale?: number;
    /**
     * Updated text review
     * @type {string}
     * @memberof ReviewUpdate
     */
    testo?: string;
    /**
     * Updated numerical rating
     * @type {number}
     * @memberof ReviewUpdate
     */
    voto?: number;
    /**
     * Updated frequency of attending the course
     * @type {string}
     * @memberof ReviewUpdate
     */
    frequenza?: ReviewUpdate.FrequenzaEnum;
    /**
     * Updated status of anonymity
     * @type {boolean}
     * @memberof ReviewUpdate
     */
    anonima?: boolean;
}

/**
 * @export
 * @namespace ReviewUpdate
 */
export namespace ReviewUpdate {
    /**
     * @export
     * @enum {string}
     */
    export enum FrequenzaEnum {
        Nessuna = <any> 'Nessuna',
        Rara = <any> 'Rara',
        Occasionale = <any> 'Occasionale',
        Frequente = <any> 'Frequente'
    }
}
/**
 * 
 * @export
 * @interface ReviewsBody
 */
export interface ReviewsBody {
    /**
     * ID of the user submitting the review
     * @type {string}
     * @memberof ReviewsBody
     */
    autore?: string;
    /**
     * Name of the exam being reviewed
     * @type {string}
     * @memberof ReviewsBody
     */
    professore?: string;
    /**
     * Course related to the review
     * @type {string}
     * @memberof ReviewsBody
     */
    corso?: string;
    /**
     * Date of the review (ISO 8601 format)
     * @type {Date}
     * @memberof ReviewsBody
     */
    data?: Date;
    /**
     * Rating for the professor's teaching
     * @type {number}
     * @memberof ReviewsBody
     */
    valutazioneProfessore?: number;
    /**
     * Rating for the feasibility of the course
     * @type {number}
     * @memberof ReviewsBody
     */
    valutazioneFattibilita?: number;
    /**
     * Rating for the course material
     * @type {number}
     * @memberof ReviewsBody
     */
    valutazioneMateriale?: number;
    /**
     * Optional text review
     * @type {string}
     * @memberof ReviewsBody
     */
    testo?: string;
    /**
     * Optional numerical rating
     * @type {number}
     * @memberof ReviewsBody
     */
    voto?: number;
    /**
     * Frequency of attending the course
     * @type {string}
     * @memberof ReviewsBody
     */
    frequenza?: ReviewsBody.FrequenzaEnum;
    /**
     * Indicates if the review is anonymous
     * @type {boolean}
     * @memberof ReviewsBody
     */
    anonima?: boolean;
}

/**
 * @export
 * @namespace ReviewsBody
 */
export namespace ReviewsBody {
    /**
     * @export
     * @enum {string}
     */
    export enum FrequenzaEnum {
        Nessuna = <any> 'Nessuna',
        Rara = <any> 'Rara',
        Occasionale = <any> 'Occasionale',
        Frequente = <any> 'Frequente'
    }
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Submit a new review
         * @param {ReviewsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsPost(body: ReviewsBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling reviewsPost.');
            }
            const localVarPath = `/reviews`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific review
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdDelete(reviewId: string, options: any = {}): FetchArgs {
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling reviewsReviewIdDelete.');
            }
            const localVarPath = `/reviews/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about a specific review
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdGet(reviewId: string, options: any = {}): FetchArgs {
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling reviewsReviewIdGet.');
            }
            const localVarPath = `/reviews/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update information about a specific review
         * @param {ReviewUpdate} body 
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdPut(body: ReviewUpdate, reviewId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling reviewsReviewIdPut.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling reviewsReviewIdPut.');
            }
            const localVarPath = `/reviews/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Submit a new review
         * @param {ReviewsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsPost(body: ReviewsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).reviewsPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a specific review
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdDelete(reviewId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).reviewsReviewIdDelete(reviewId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieve information about a specific review
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdGet(reviewId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).reviewsReviewIdGet(reviewId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update information about a specific review
         * @param {ReviewUpdate} body 
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdPut(body: ReviewUpdate, reviewId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).reviewsReviewIdPut(body, reviewId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Submit a new review
         * @param {ReviewsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsPost(body: ReviewsBody, options?: any) {
            return DefaultApiFp(configuration).reviewsPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a specific review
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdDelete(reviewId: string, options?: any) {
            return DefaultApiFp(configuration).reviewsReviewIdDelete(reviewId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieve information about a specific review
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdGet(reviewId: string, options?: any) {
            return DefaultApiFp(configuration).reviewsReviewIdGet(reviewId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update information about a specific review
         * @param {ReviewUpdate} body 
         * @param {string} reviewId ID of the review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsReviewIdPut(body: ReviewUpdate, reviewId: string, options?: any) {
            return DefaultApiFp(configuration).reviewsReviewIdPut(body, reviewId, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Submit a new review
     * @param {ReviewsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reviewsPost(body: ReviewsBody, options?: any) {
        return DefaultApiFp(this.configuration).reviewsPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a specific review
     * @param {string} reviewId ID of the review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reviewsReviewIdDelete(reviewId: string, options?: any) {
        return DefaultApiFp(this.configuration).reviewsReviewIdDelete(reviewId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieve information about a specific review
     * @param {string} reviewId ID of the review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reviewsReviewIdGet(reviewId: string, options?: any) {
        return DefaultApiFp(this.configuration).reviewsReviewIdGet(reviewId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update information about a specific review
     * @param {ReviewUpdate} body 
     * @param {string} reviewId ID of the review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reviewsReviewIdPut(body: ReviewUpdate, reviewId: string, options?: any) {
        return DefaultApiFp(this.configuration).reviewsReviewIdPut(body, reviewId, options)(this.fetch, this.basePath);
    }

}
